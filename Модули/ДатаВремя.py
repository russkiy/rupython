import datetime
from rupython import __Общие_функции__

Часовой_пояс = datetime.timezone
Временная_метка = datetime.datetime

Формат_даты = '%Д.%М.%Г'
Формат_времени = '%ч:%м:%с'
Формат_даты_и_времени = '%Д.%М.%Г %ч:%м:%с'

Словарь_спецификаторов = {
    '%Г': '%Y',  # год (4 цифры, например 1945)
    '%М': '%m',  # месяц (2 цифры, 01–12)
    '%Д': '%d',  # день (2 цифры, 01–31)
    '%ч': '%H',  # часы (2 цифры, 00–23)
    '%м': '%M',  # минуты (2 цифры, 00–59)
    '%с': '%S',  # секунды (2 цифры, 00–59)
    '%д': '%f'   # дробная часть секунды (в микросекундах) (6 цифр, 000000–999999)
}

Словарь_параметров = {
    'год': 'year', 'месяц': 'month', 'день': 'day',
    'часов': 'hour', 'минут': 'minute', 'секунд': 'second',
    'микросекунд': 'microsecond', 'часовой_пояс': 'tzinfo',
    'добавка_летнего_времени': 'fold'
}

Словарь_параметров_интервала = {
    'дней': 'days', 'секунд': 'seconds',
    'микросекунд': 'microseconds', 'миллисекунд': 'milliseconds',
    'минут': 'minutes', 'часов': 'hours', 'недель': 'weeks'
}

Месяцы_родительный = {
    1: 'января', 2: 'февраля', 3: 'марта', 4: 'апреля',
    5: 'мая', 6: 'июня', 7: 'июля', 8: 'августа',
    9: 'сентября', 10: 'октября', 11: 'ноября', 12: 'декабря'
}

Дни_недели_полные = {
    1: 'понедельник', 2: 'вторник', 3: 'среда', 4: 'четверг',
    5: 'пятница', 6: 'суббота', 7: 'воскресенье'
}

Дни_недели_краткие = {
    1: 'Пн', 2: 'Вт', 3: 'Ср', 4: 'Чт',
    5: 'Пт', 6: 'Сб', 7: 'Вс'
}

def Склонение_после_числительного(число, слова):
	return str(число) + ' ' + \
        (слова[2] if число % 100 >= 5 and число % 100 <= 20 else \
            (слова[0] if число % 10 == 1 else \
                (слова[1] if число % 10 >= 2 and число % 10 <= 4 else слова[2])))

def Перевести_формат(формат):
    for русский, питоновский in Словарь_спецификаторов.items():
        формат = формат.replace(русский, питоновский)
    return формат

class Дата_и_время:
    def __init__(здесь, *ПА, **ИА):
        if len(ПА) > 0 and type(ПА[0]) == datetime.datetime: здесь._дата_время = ПА[0]
        else:
            ИА = __Общие_функции__.Заменить_ключи_в_словаре(
                ИА, Словарь_параметров
            )
            здесь._дата_время = datetime.datetime(*ПА, **ИА)

    @staticmethod
    def Сейчас(часовой_пояс = None):
        return Дата_и_время(datetime.datetime.now(часовой_пояс))

    @staticmethod
    def Из_метки_времени(метка_времени, часовой_пояс = None):
        return Дата_и_время(datetime.datetime.fromtimestamp(метка_времени, часовой_пояс))

    @staticmethod
    def Из_строки(строка):
        return Дата_и_время.Разобрать(строка, Формат_даты_и_времени)

    @staticmethod
    def Разобрать(строка, формат):
        формат = Перевести_формат(формат)
        return Дата_и_время(datetime.datetime.strptime(строка, формат))

    def В_формат(здесь, формат):
        формат = Перевести_формат(формат)
        return здесь._дата_время.strftime(формат)

    def __str__(здесь):
        формат = Перевести_формат(Формат_даты_и_времени)
        return здесь._дата_время.strftime(формат)

    def Словами(здесь, формат = 'полный'):
        день_недели = здесь.Номер_дня_недели()
        if формат == 'полный':
            return f"{Дни_недели_полные[день_недели]}, {здесь.День} {Месяцы_родительный[здесь.Месяц]} {здесь.Год} года, {здесь.Часов:02d}:{здесь.Минут:02d}"
        elif формат == 'краткий':
            return f"{Дни_недели_краткие[день_недели]}, {здесь.День} {Месяцы_родительный[здесь.Месяц]} {здесь.Год} г."
        elif формат == 'дата':
            return f"{здесь.День} {Месяцы_родительный[здесь.Месяц]} {здесь.Год} года"
        elif формат == 'время':
            return f"{здесь.Часов:02d}:{здесь.Минут:02d}"
        elif формат == 'день_недели':
            return Дни_недели_полные[день_недели]
        else:
            raise ValueError("Неподдерживаемый формат")

    def В_метку_времени(здесь):
        return здесь._дата_время.timestamp()

    def День_недели(здесь):
        return здесь._дата_время.weekday()

    def Номер_дня_недели(здесь):
        return здесь._дата_время.isoweekday()

    def Добавить(здесь, интервал):
        return Дата_и_время(здесь._дата_время + интервал._интервал)

    def Вычесть(здесь, интервал):
        return Дата_и_время(здесь._дата_время - интервал._интервал)

    def __add__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __radd__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __sub__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Вычесть(другой)
        return NotImplemented

    def __eq__(здесь, другой):
        if isinstance(другой, Дата_и_время):
            return здесь._дата_время == другой._дата_время
        return NotImplemented

    def __lt__(здесь, другой):
        if isinstance(другой, Дата_и_время):
            return здесь._дата_время < другой._дата_время
        return NotImplemented

    def __le__(здесь, другой):
        if isinstance(другой, Дата_и_время):
            return здесь._дата_время <= другой._дата_время
        return NotImplemented

    def __gt__(здесь, другой):
        if isinstance(другой, Дата_и_время):
            return здесь._дата_время > другой._дата_время
        return NotImplemented

    def __ge__(здесь, другой):
        if isinstance(другой, Дата_и_время):
            return здесь._дата_время >= другой._дата_время
        return NotImplemented

    def __format__(здесь, формат):
        return здесь.В_формат(формат)

    @property
    def Год(здесь):
        return здесь._дата_время.year

    @property
    def Месяц(здесь):
        return здесь._дата_время.month

    @property
    def День(здесь):
        return здесь._дата_время.day

    @property
    def Часов(здесь):
        return здесь._дата_время.hour

    @property
    def Минут(здесь):
        return здесь._дата_время.minute

    @property
    def Секунд(здесь):
        return здесь._дата_время.second

    @property
    def Микросекунд(здесь):
        return здесь._дата_время.microsecond

    @property
    def Часовой_пояс(здесь):
        return здесь._дата_время.tzinfo

class Дата:
    def __init__(здесь, *ПА, **ИА):
        if len(ПА) > 0 and type(ПА[0]) == datetime.date: здесь._дата = ПА[0]
        else:
            ИА = __Общие_функции__.Заменить_ключи_в_словаре(
                ИА, Словарь_параметров
            )
            здесь._дата = datetime.date(*ПА, **ИА)

    @staticmethod
    def Сегодня():
        return Дата(datetime.date.today())

    @staticmethod
    def От_даты(порядковый_номер):
        return Дата(datetime.date.fromordinal(порядковый_номер))

    def В_формат(здесь, формат):
        формат = Перевести_формат(формат)
        return здесь._дата.strftime(формат)

    def __str__(здесь):
        формат = Перевести_формат(Формат_даты)
        return здесь._дата.strftime(формат)

    def Из_строки(строка):
        return Дата(Дата_и_время.Разобрать(строка, Формат_времени)._дата_время.time())

    def День_недели(здесь):
        return здесь._дата.isoweekday()

    def Добавить(здесь, интервал):
        return Дата(здесь._дата + интервал._интервал)

    def Вычесть(здесь, интервал):
        return Дата(здесь._дата - интервал._интервал)

    def __add__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __radd__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __sub__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Вычесть(другой)
        return NotImplemented

    def __eq__(здесь, другой):
        if isinstance(другой, Дата):
            return здесь._дата == другой._дата
        return NotImplemented

    def __lt__(здесь, другой):
        if isinstance(другой, Дата):
            return здесь._дата < другой._дата
        return NotImplemented

    def __le__(здесь, другой):
        if isinstance(другой, Дата):
            return здесь._дата <= другой._дата
        return NotImplemented

    def __gt__(здесь, другой):
        if isinstance(другой, Дата):
            return здесь._дата > другой._дата
        return NotImplemented

    def __ge__(здесь, другой):
        if isinstance(другой, Дата):
            return здесь._дата >= другой._дата
        return NotImplemented

    def __format__(здесь, формат):
        return здесь.В_формат(формат)

    @property
    def год(здесь): return здесь._дата.year

    @property
    def месяц(здесь): return здесь._дата.month

    @property
    def день(здесь): return здесь._дата.day

class Время:
    def __init__(здесь, *ПА, **ИА):
        ИА = __Общие_функции__.Заменить_ключи_в_словаре(
            ИА, Словарь_параметров
        )
        здесь._время = datetime.time(*ПА, **ИА)

    @staticmethod
        def Сейчас(часовой_пояс=None):
            return Время(datetime.datetime.now(часовой_пояс).time())

    def В_формат(здесь, формат):
        формат = Перевести_формат(формат)
        return здесь._время.strftime(формат)

    def __str__(здесь):
        формат = Перевести_формат(Формат_времени)
        return здесь._время.strftime(формат)

    def Заменить(здесь, **ИА):
        ИА = __Общие_функции__.Заменить_ключи_в_словаре(
            ИА, Словарь_параметров
        )
        return Время(здесь._время.replace(**ИА))

    def Добавить(здесь, интервал):
        базовая_дата = datetime.datetime(1970, 1, 1, здесь._время.hour, здесь._время.minute, здесь._время.second, здесь._время.microsecond, здесь._время.tzinfo)
        результат = базовая_дата + интервал._интервал
        return Время(результат.hour, результат.minute, результат.second, результат.microsecond, здесь._время.tzinfo)

    def Вычесть(здесь, интервал):
        базовая_дата = datetime.datetime(1970, 1, 1, здесь._время.hour, здесь._время.minute, здесь._время.second, здесь._время.microsecond, здесь._время.tzinfo)
        результат = базовая_дата - интервал._интервал
        return Время(результат.hour, результат.minute, результат.second, результат.microsecond, здесь._время.tzinfo)

    def __add__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __radd__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __sub__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Вычесть(другой)
        return NotImplemented

    def __eq__(здесь, другой):
        if isinstance(другой, Время):
            return здесь._время == другой._время
        return NotImplemented

    def __lt__(здесь, другой):
        if isinstance(другой, Время):
            return здесь._время < другой._время
        return NotImplemented

    def __le__(здесь, другой):
        if isinstance(другой, Время):
            return здесь._время <= другой._время
        return NotImplemented

    def __gt__(здесь, другой):
        if isinstance(другой, Время):
            return здесь._время > другой._время
        return NotImplemented

    def __ge__(здесь, другой):
        if isinstance(другой, Время):
            return здесь._время >= другой._время
        return NotImplemented

    def __format__(здесь, формат):
        return здесь.В_формат(формат)

    @property
    def Часов(здесь):
        return здесь._время.hour

    @property
    def Минут(здесь):
        return здесь._время.minute

    @property
    def Секунд(здесь):
        return здесь._время.second

    @property
    def Микросекунд(здесь):
        return здесь._время.microsecond

    @property
    def Часовой_пояс(здесь):
        return здесь._время.tzinfo

class Интервал:
    def __init__(здесь, *ПА, **ИА):
        if len(ПА) > 0 and type(ПА[0]) == datetime.timedelta: здесь._интервал = ПА[0]
        else:
            ИА = __Общие_функции__.Заменить_ключи_в_словаре(
                ИА, Словарь_параметров_интервала
            )
            здесь._интервал = datetime.timedelta(*ПА, **ИА)

    def Добавить(здесь, другой):
        return Интервал(дней=(здесь._интервал + другой._интервал).days, секунд=(здесь._интервал + другой._интервал).seconds, микросекунд=(здесь._интервал + другой._интервал).microseconds)

    def Вычесть(здесь, другой):
        return Интервал(дней=(здесь._интервал - другой._интервал).days, секунд=(здесь._интервал - другой._интервал).seconds, микросекунд=(здесь._интервал - другой._интервал).microseconds)

    def __str__(здесь):
        части = []
        if здесь.Дней:
            части.append(Склонение_после_числительного(здесь.Дней, ['день', 'дня', 'дней']))
        секунд = здесь.Секунд
        if секунд >= 3600:
            часов = секунд // 3600
            части.append(Склонение_после_числительного(часов, ['час', 'часа', 'часов']))
            секунд %= 3600
        if секунд >= 60:
            минут = секунд // 60
            части.append(Склонение_после_числительного(минут, ['минута', 'минуты', 'минут']))
            секунд %= 60
        if секунд:
            части.append(Склонение_после_числительного(секунд, ['секунда', 'секунды', 'секунд']))
        return ' '.join(части) or '0 секунд'

    @staticmethod
    def Из_строки(строка):
        части = строка.split()
        ИА = {}
        i = 0
        while i < len(части):
            число = int(части[i])
            единица = части[i + 1]
            if 'день' in единица or 'дня' in единица or 'дней' in единица:
                ИА['дней'] = число
            elif 'час' in единица:
                ИА['часов'] = число
            elif 'минут' in единица:
                ИА['минут'] = число
            elif 'секунд' in единица:
                ИА['секунд'] = число
            i += 2
        return Интервал(**ИА)

    def __add__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Добавить(другой)
        return NotImplemented

    def __sub__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь.Вычесть(другой)
        return NotImplemented

    def __eq__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь._интервал == другой._интервал
        return NotImplemented

    def __lt__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь._интервал < другой._интервал
        return NotImplemented

    def __le__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь._интервал <= другой._интервал
        return NotImplemented

    def __gt__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь._интервал > другой._интервал
        return NotImplemented

    def __ge__(здесь, другой):
        if isinstance(другой, Интервал):
            return здесь._интервал >= другой._интервал
        return NotImplemented

    @property
    def Дней(здесь):
        return здесь._интервал.days

    @property
    def Секунд(здесь):
        return здесь._интервал.seconds

    @property
    def Микросекунд(здесь):
        return здесь._интервал.microseconds

    @property
    def Всего_секунд(здесь):
        return здесь._интервал.total_seconds()

def Совместить(дата, время):
    return Дата_время(datetime.datetime.combine(дата._дата, время._время))

class ДатаСтСт:
    def __init__(здесь, *ПА):
        if len(ПА) == 3:
            здесь.год, здесь.месяц, здесь.день = ПА
            здесь._Посчитать_дни()
        else:
            if isinstance(ПА[0], ДатаСтСт):
                здесь.в_днях = ПА[0].в_днях
            else:
                здесь.в_днях = ПА[0]
            здесь._Посчитать_дату()

    def _Посчитать_день_недели_и_года(здесь):
        здесь.день_недели = (здесь.в_днях - 1) % 7
        if здесь.день_недели == 0: здесь.день_недели = 7
        здесь.день_года = (
            (275 * здесь.месяц // 9)
            - (((здесь.месяц + 9) // 12) * (1 + ((здесь.год - 4 * (здесь.год // 4) + 2) // 3)))
            + здесь.день
            - 31
        )

    def _Посчитать_дни(здесь):
        здесь.в_днях = (
            367 * здесь.год
            - int((7 * (здесь.год + 5001 + int((здесь.месяц - 9) / 7))) / 4)
            + int((275 * здесь.месяц) / 9)
            + здесь.день
            + 8353
        )
        здесь._Посчитать_день_недели_и_года()

    def _Посчитать_дату(здесь):
        a = здесь.в_днях + 1890
        b = int((a - 122.1) / 365.25)
        c = int(365.25 * b)
        d = int((a - c) / 30.6001)
        здесь.день = a - c - int(30.6001 * d)
        здесь.месяц = d - (13 if d > 13 else 1)
        здесь.год = b - (3 if здесь.месяц < 3 else 4)
        здесь._Посчитать_день_недели_и_года()

    def Добавить_дни(здесь, количество):
        здесь.в_днях += количество
        здесь._Посчитать_дату()
        return здесь

    def Разница_в_днях(здесь, другая_дата):
        return здесь.в_днях - другая_дата.в_днях

    def Сравнить(здесь, другая_дата):
        if здесь.в_днях < другая_дата.в_днях: return -1
        elif здесь.в_днях > другая_дата.в_днях: return 1
        else: return 0

    def В_новый_стиль(здесь):
        разница = здесь.год // 100 - здесь.год // 400 - 2
        год_увеличения_разницы = здесь.год % 100 == 0 and здесь.год % 400 != 0
        if год_увеличения_разницы:
            if здесь.день_года < 60: разница -= 1
        if здесь.день_года == 59 and год_увеличения_разницы:
            дата = Дата(здесь.год, 3, 1) + Интервал(дней = разница)
        else:
            дата = Дата(здесь.год, здесь.месяц, здесь.день)
            дата += Интервал(дней = разница)
        return дата

def Пасха(год, нов_ст = None):
    смещение = (год % 19 * 19 + 15) % 30
    смещение += (год % 4 * 2 + год % 7 * 4 + 6 * смещение + 6) % 7
    нов_ст = True if нов_ст is None and год >= 1918 else нов_ст
    дата = ДатаСтСт(год, 3, 22)
    дата.Добавить_дни(смещение)
    if нов_ст: return дата.В_новый_стиль()
    else: return дата

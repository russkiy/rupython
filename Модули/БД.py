import sqlite3

Ошибка = sqlite3.Error
ОшибкаБазыДанных = sqlite3.DatabaseError
ОшибкаПрограммования = sqlite3.ProgrammingError
ОшибкаОперации = sqlite3.OperationalError

Разбор_объявленных_типов = sqlite3.PARSE_DECLTYPES
Разбор_названий_столбцов = sqlite3.PARSE_COLNAMES
Успешно = sqlite3.SQLITE_OK
Отказ = sqlite3.SQLITE_DENY
Игнорировать = sqlite3.SQLITE_IGNORE
Уровень_интерфейса_взаимодействия = sqlite3.apilevel
Стиль_параметров = sqlite3.paramstyle
Потокобезопасность = sqlite3.threadsafety

Словарь_перевода = {
    'НАЧАТЬ': 'BEGIN',
    'ЗАКОНЧИТЬ': 'END',
    'ТРАНЗАКЦИЮ': 'TRANSACTION',
    'ОТЛОЖЕННО': 'DEFERRED',
    'НЕМЕДЛЕННО': 'IMMEDIATE',
    'ИСКЛЮЧИТЕЛЬНО': 'EXCLUSIVE',
    'ОТКАТИТЬ': 'ROLLBACK',
    'ТОЧКА_СОХРАНЕНИЯ': 'SAVEPOINT',

    'ВЫБРАТЬ': 'SELECT',
    'ИЗ': 'FROM',
    'ГДЕ': 'WHERE',
    'УПОРЯДОЧИВ ПО': 'ORDER BY',
    'ПО ВОЗРАСТАНИЮ': 'ASC',
    'ПО УБЫВАНИЮ': 'DESC',
    'ГРУППАМИ ПО': 'GROUP BY',
    'ИМЕЮЩИМИ': 'HAVING',
    'РАЗЛИЧАЮЩИЕСЯ': 'DISTINCT',
    'ОБЪЕДИНИВ С': 'UNION',
    'СОДЕРЖАЩИЕСЯ В': 'INTERSECT',
    'ВСЕ': 'ALL',
    'НЕКОТОРЫЕ': 'ANY',
    'ИСКЛЮЧАЯ': 'EXCEPT',
    'НЕ БОЛЕЕ': 'LIMIT',
    'СО СМЕЩЕНИЕМ': 'OFFSET',
    'ПРИСОЕДИНИВ': 'JOIN',
    'ВНУТРЕННЕ': 'INNER',
    'ВНЕШНЕ': 'OUTER',
    'ПО ЛЕВОЙ': 'LEFT',
    'ПО ПРАВОЙ': 'RIGHT',
    'ПОЛНОСТЬЮ': 'FULL',
    'ПО': 'ON',
    'ПЕРЕКРЁСТНО': 'CROSS',
    'ИСПОЛЬЗУЯ': 'USING',

    'ДОБАВИТЬ В': 'INSERT INTO',
    'ЗНАЧЕНИЯ': 'VALUES',
    'ИЗМЕНИТЬ': 'UPDATE',
    'УСТАНОВИВ': 'SET',
    'УДАЛИТЬ': 'DELETE',

    'ИЗМЕНИТЬ ТАБЛИЦУ': 'ALTER TABLE',
    'ИЗМЕНИТЬ СТОЛБЕЦ': 'ALTER COLUMN',
    'СОЗДАТЬ': 'CREATE',
    'БАЗУ ДАННЫХ': 'DATABASE',
    'ТАБЛИЦУ': 'TABLE',
    'ДОБАВИВ': 'ADD',
    'УДАЛИВ': 'DROP',
    'ИНДЕКС': 'INDEX',
    'УНИКАЛЬНЫЙ': 'UNIQUE',
    'ПРЕДСТАВЛЕНИЕ': 'VIEW',
    'СТОЛБЕЦ': 'COLUMN',

    'ЯВЛЯЕТСЯ ПУСТЫМ': 'IS NULL',
    'НЕ ЯВЛЯЕТСЯ ПУСТЫМ': 'IS NOT NULL',
    'ПУСТО': 'NULL',
    'И': 'AND',
    'ИЛИ': 'OR',
    'НЕ': 'NOT',
    'ПОДОБНО': 'LIKE',
    'МЕЖДУ': 'BETWEEN',
    'В': 'IN',
    'ЕСЛИ': 'IF',
    'СУЩЕСТВУЕТ': 'EXISTS',

    'ЦЕЛОЕ': 'INTEGER',
    'ЧИСЛО': 'NUMBER',
    'ВЕЩЕСТВЕННОЕ': 'FLOAT',
    'СТРОКА': 'VARCHAR',
    'ТЕКСТ': 'TEXT',
    'ДАННЫЕ': 'BLOB',
    'ДАТА': 'DATE',
    'ВРЕМЯ': 'TIME',
    'ВРЕМЕННАЯ_МЕТКА': 'TIMESTAMP',
    'ЛОГИЧЕСКОЕ': 'BOOLEAN',

    'КЛЮЧ': 'KEY',
    'ПЕРВИЧНЫЙ': 'PRIMARY',
    'ВНЕШНИЙ': 'FOREIGN',
    'ПРОВЕРЯТЬ': 'CHECK',
    'КАК': 'AS',
    'ДА': 'TRUE',
    'НЕТ': 'FALSE',
    'ПО_УМОЛЧАНИЮ': 'DEFAULT',
    'САМОУВЕЛИЧИВАЮЩЕЕСЯ': 'AUTO_INCREMENT',

    'КОЛИЧЕСТВО': 'COUNT',
    'СУММА': 'SUM',
    'СРЕДНЕЕ': 'AVG',
    'МИНИМУМ': 'MIN',
    'МАКСИМУМ': 'MAX',
    'СЦЕПИТЬ': 'CONCAT',
    'ДЛИНА': 'LENGTH',
    'В_ЗАГЛАВНЫЕ': 'UPPER',
    'В_СТРОЧНЫЕ': 'LOWER',
    'ПОДСТРОКА': 'SUBSTRING',
    'ЗАМЕНИТЬ': 'REPLACE',
    'ОКРУГЛИТЬ': 'ROUND',
    'ОКРУГЛИТЬ_ВНИЗ': 'FLOOR',
    'ОКРУГЛИТЬ_ВВЕРХ': 'CEIL',
    'МОДУЛЬ': 'ABS',
    'ТЕКУЩАЯ_ДАТА': 'CURRENT_DATE',
    'ТЕКУЩЕЕ_ВРЕМЯ': 'CURRENT_TIME',
    'ТЕКУЩАЯ_ВРЕМЕННАЯ_МЕТКА': 'CURRENT_TIMESTAMP',
    'ИЗВЛЕЧЬ': 'EXTRACT',
    'ГОД': 'YEAR',
    'МЕСЯЦ': 'MONTH',
    'ДЕНЬ': 'DAY'
}

def Получить_токены(запрос):
    токены = []
    текущий_токен = ''
    в_строке = False
    в_комментарии = False
    строка_символ = None
    i = 0

    while i < len(запрос):
        символ = запрос[i]

        if символ in ('"', "'") and not в_комментарии:
            if в_строке and символ == строка_символ:
                в_строке = False
                текущий_токен += символ
                токены.append(текущий_токен)
                текущий_токен = ''
                i += 1
                continue
            elif not в_строке:
                в_строке = True
                строка_символ = символ
                if текущий_токен:
                    токены.append(текущий_токен)
                    текущий_токен = ''
                текущий_токен = символ
                i += 1
                continue

        if символ == '-' and i + 1 < len(запрос) and запрос[i + 1] == '-' and not в_строке:
            if текущий_токен:
                токены.append(текущий_токен)
                текущий_токен = ''
            в_комментарии = True
            текущий_токен = '--'
            i += 2
            while i < len(запрос) and запрос[i] != '\n':
                текущий_токен += запрос[i]
                i += 1
            токены.append(текущий_токен)
            текущий_токен = ''
            в_комментарии = False
            continue

        if символ == '/' and i + 1 < len(запрос) and запрос[i + 1] == '*' and not в_строке:
            if текущий_токен:
                токены.append(текущий_токен)
                текущий_токен = ''
            в_комментарии = True
            текущий_токен = '/*'
            i += 2
            while i < len(запрос) - 1 and not (запрос[i] == '*' and запрос[i + 1] == '/'):
                текущий_токен += запрос[i]
                i += 1
            if i < len(запрос) - 1:
                текущий_токен += '*/'
                i += 2
            токены.append(текущий_токен)
            текущий_токен = ''
            в_комментарии = False
            continue

        if в_строке or в_комментарии:
            текущий_токен += символ
            i += 1
            continue

        if символ.isspace() or символ in (',', ';', '(', ')', '=', '<', '>', '!'):
            if текущий_токен:
                токены.append(текущий_токен)
                текущий_токен = ''
            if not символ.isspace():
                токены.append(символ)
            i += 1
            continue
        
        текущий_токен += символ
        i += 1
    
    if текущий_токен:
        токены.append(текущий_токен)
    
    return токены

def Перевести_токены(токены):
    переведённые_токены = []
    i = 0
    
    while i < len(токены):
        токен = токены[i]

        if (токен.startswith('"') or токен.startswith("'") or 
            токен.startswith('--') or токен.startswith('/*') or
            токен in (',', ';', '(', ')', '=', '<', '>', '!')):
            переведённые_токены.append(токен)
            i += 1
            continue

        найдено_ключевое_слово = False
        for длина in range(5, 0, -1):
            if i + длина <= len(токены):
                фраза = ' '.join(токены[i:i + длина]).upper()
                if фраза in Словарь_перевода:
                    переведённые_токены.append(Словарь_перевода[фраза])
                    i += длина
                    найдено_ключевое_слово = True
                    break
        
        if not найдено_ключевое_слово:
            переведённые_токены.append(токен)
            i += 1
    
    return переведённые_токены

def Собрать_запрос(токены):
    запрос = ''
    for i, токен in enumerate(токены):
        if токен in (',', ';', '(', ')', '=', '<', '>', '!'):
            запрос += токен
        else:
            if i > 0 and токены[i - 1] not in (' ', ',', ';', '(', '=', '<', '>', '!'):
                запрос += ' '
            запрос += токен
    return запрос.strip()

def Перевести_код_запроса(текст):
    токены = Получить_токены(текст)
    переведённые_токены = Перевести_токены(токены)
    запрос = Собрать_запрос(переведённые_токены)
    return запрос

class Указатель(sqlite3.Cursor):
    def __init__(здесь, курсор):
        super().__init__(курсор.connection)
        здесь.cursor = курсор

    def Выполнить_запрос(здесь, запрос, параметры=()):
        запрос = Перевести_код_запроса(запрос)
        здесь.execute(запрос, параметры)

    def Выполнить_запросы(здесь, запрос, последовательность_параметров):
        запрос = Перевести_код_запроса(запрос)
        здесь.executemany(запрос, последовательность_параметров)

    def Выполнить_скрипт(здесь, скрипт):
        скрипт = Перевести_код_запроса(скрипт)
        здесь.executescript(скрипт)

    def Извлечь_запись(здесь):
        return здесь.cursor.fetchone()

    def Извлечь_записи(здесь, количество):
        return здесь.cursor.fetchmany(количество)

    def Извлечь_все_записи(здесь):
        return здесь.cursor.fetchall()

    def Закрыть(здесь): здесь.cursor.close()

    @property
    def Описание(здесь): return здесь.cursor.description

    @property
    def Количество_строк(здесь): return здесь.cursor.rowcount

    @property
    def Последний_идентификатор(здесь): return здесь.cursor.lastrowid

class Соединение(sqlite3.Connection):
    def __init__(здесь, *ПА, **ИА):
        super().__init__(*ПА, **ИА)

    def Создать_указатель(здесь):
        курсор = здесь.cursor()
        return Указатель(курсор)

    def Выполнить_запрос(здесь, запрос, параметры=()):
        запрос = Перевести_код_запроса(запрос)
        указатель = здесь.execute(запрос, параметры)
        return Указатель(указатель)

    def Выполнить_запросы(здесь, запрос, последовательность_параметров):
        запрос = Перевести_код_запроса(запрос)
        указатель = здесь.executemany(запрос, последовательность_параметров)
        return Указатель(указатель)

    def Выполнить_скрипт(здесь, скрипт):
        скрипт = Перевести_код_запроса(скрипт)
        здесь.executescript(скрипт)

    def Создать_функцию(здесь, имя, количество_параметров, функция):
        здесь.create_function(имя, количество_параметров, функция)

    def Создать_агрегатную_функцию(здесь, имя, количество_параметров, класс_агрегатной_функции):
        здесь.create_aggregate(имя, количество_параметров, класс_агрегатной_функции)

    def Создать_сопоставление(здесь, имя, функция):
        здесь.create_collation(имя, функция)

    def Закрыть(здесь): здесь.close()

    def Утвердить(здесь): здесь.commit()

    def Откатить(здесь): здесь.rollback()

    @property
    def В_транзакции(здесь): return здесь.in_transaction

    @property
    def Изоляция(здесь): return здесь.isolation_level

    @Изоляция.setter
    def Изоляция(здесь, значение): здесь.isolation_level = значение

def Подключиться(
    путь, *,
    таймаут = 5.0,
    обнаружение_типов = 0,
    уровень_изоляции = None,
    проверять_тот_же_ли_поток = True,
    фабрика = Соединение,
    кэш_инструкций = 128,
    является_ссылкой = False
):
    if уровень_изоляции == 'ОТЛОЖЕННО': уровень_изоляции = 'DEFERRED'
    elif уровень_изоляции == 'НЕМЕДЛЕННО': уровень_изоляции = 'IMMEDIATE'
    elif уровень_изоляции == 'ИСКЛЮЧИТЕЛЬНО': уровень_изоляции = 'EXCLUSIVE'
    else: уровень_изоляции = None

    соединение = sqlite3.connect(
        путь,
        timeout=таймаут,
        detect_types=обнаружение_типов,
        isolation_level=уровень_изоляции,
        check_same_thread=проверять_тот_же_ли_поток,
        factory=фабрика,
        cached_statements=кэш_инструкций,
        uri=является_ссылкой
    )

    return соединение
